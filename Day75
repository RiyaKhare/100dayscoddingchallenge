// Topic-Permutations


class Solution {
     List<List<Integer>> ans;
int nums[];
     int n;
    public List<List<Integer>> permute(int[] nums) {
        this.nums=nums;
        n=nums.length;
        ans= new LinkedList();
        // backtrack(new boolean[nums.length],new LinkedList());
        backtrack(nums,0,new LinkedList());
        // backtrack(nums,0);
        return ans;
    }

    void swap(int[] nums, int i , int j)
    {
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }

// without using extra space
    void backtrack( int[] nums,int start  )
    {
        if(start==n )
        {
            List<Integer> list =  Arrays.stream(nums).boxed().collect(Collectors.toList());
            ans.add(new LinkedList(list));
            return;
        }

        for(int i=start;i<nums.length;i++)
        {
            swap(nums,start,i);
            backtrack(nums,start+1);
            swap(nums,i,start);
        }
    }

    // using extra space
    void backtrack( int[] nums,int start ,List<Integer> list  )
    {
        if(list.size()==n )
        {
                ans.add(new LinkedList(list));
                return;
        }
        for(int i=start;i<nums.length;i++)
        {
           
            swap(nums,start,i);
            list.add(nums[start]);
            backtrack(nums,start+1,list);
            swap(nums,i,start);
            list.remove(list.size()-1);
        }
    }

// using array  to check for visited not visited
    void backtrack(boolean[] marked, List<Integer> list  )
    {
        if(list.size()==n )
        {
                ans.add(new LinkedList(list));
                return;
        }
        for(int i=0;i<nums.length;i++)
        {
            if(marked[i]) continue;

            list.add(nums[i]);
            marked[i]=true;
            backtrack(marked,list);
            marked[i]=false;
            list.remove(list.size()-1);
        }
    }
}


//
Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
