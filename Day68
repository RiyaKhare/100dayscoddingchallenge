// Add Two Numbers
//You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 //Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 
 
 
 /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(); //creating a dummy node so that data can be stored
        ListNode temp = dummy;  //creating temp using dummy node
        int carry = 0 ;   //carry pointer
        while(list1!=null || list2!=null || carry!=0){ 
            int sum=0;
            if(list1!=null){
                sum+=list1.val;
                list1 = list1.next;
            }
            if(list2!=null){
                sum+=list2.val;
                list2 = list2.next;
            }
            sum+=carry;  //adding carry to the sum
            carry=sum/10;  //getting carry by sum, for 16 it will be 1

            ListNode ll = new ListNode(sum%10);  //adding leftover after taking carry in the new linked list, i.e from 16, 6 will be added in the linked list
            temp.next = ll;  //increasing the pointer of address so as to store the data
            temp = temp.next;  //continuing the iteration
        }
        return dummy.next; // dummy will be 0, therefore, we return dummy.next which is temp where first value is stored.
    }
}
