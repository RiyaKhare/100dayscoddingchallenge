//Best Time to Buy and Sell Stock

//You are given an array prices where prices[i] is the price of a given stock on the ith day.

//You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

//Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.



class Solution {
    public int maxProfit(int[] prices) {
      if(prices.length == 0) return prices[0];
        if(prices.length == 2 && prices[0]<prices[1]) return prices[1]-prices[0];
        if(prices.length == 2 && prices[0]>prices[1]) return 0;
        Integer buy = Integer.MAX_VALUE;
        int maxProfit = 0;
        for(int i = 0; i < prices.length; i++) {
            if(buy > prices[i]) {
                buy = prices[i];
            } else if(maxProfit < prices[i]-buy) {
                maxProfit = prices[i]-buy;
            } 
        }
        return maxProfit;
    }   
    
}

//Test Cases-
Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
