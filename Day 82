//Climbing Stairs
//You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

class Solution {
    public int climbStairs(int n) {
      int[] dp = new int[n+1];
      Arrays.fill(dp,-1);
      return ansFunction(n,dp);
    }
    public int ansFunction(int n,int[] dp)
    {
        if(n == 0 || n==1) return 1;
        if(dp[n] != -1) return dp[n];
        else returnExample 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step dp[n] = ansFunction(n-1,dp) + ansFunction(n-2,dp);
    }
}
//Output-
Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
